SCANNER
=======

Nöfn höfunda og tölvupóstar:

   Erling Óskar Kristjánsson  -  eok4@hi.is
   Andrea Ósk Sigurðardóttir  -  aos26@hi.is


Nafn hugbúnaðarins að eigin vali:

   Pointy Hats Scanner


Tilgangur í stuttu máli – hámark 20 línur :

   [Tilgangur
   
   Portscanner sem getur fundið TCP port.]


Leiðbeiningar um keyrslu:

   Þetta forrit er hannað til að vera keyrt af skipanalínu með Python3.
   Hægt er að keyra forritið í Python Virtual Environment með því að fylgja
   leiðbeiningum um uppsetningu (Setting up Python Virtual Environment) að neðan.
   Einnig er hægt að keyra forritið beint af skipanalínu, án virtual environment, 
   ef allir nauðsynlegir pakkar eru uppsettir hjá notandanum.
   
   Forritið tekur við allt að 8 færibreytum (parameters), en þær eru eins og segir héreftir.
   -ho --hosts             : Þeir hosts sem á að skanna. Getur verið URL á vefsíðu, stök IP tala eða IP range á CIDR sniði.
                             Ekkert sjálfgefið.
   -lo --lowport           : Neðri mörk þeirra porta sem þú vilt skanna, sjálfgefið er 1.
                             Talan -lo skal vera lægri en -hi.
   -hi --highport          : Efri mörk þeirra porta sem þú vilt skanna, sjálfgefið er 1023.
                             Talan -lo skal vera lægri en -hi.
   -ts --typeofscan        : Gerð skanns sem á að framkvæma. 0 fyrir Connect eða 1 fyrir SYN. Sjálfgefið er 0.
   Næst koma 0 og 1 breytur, þar sem 0 þýðir Nei og 1 þýðir Já. Sjálfgefið er 0.
   -sp --shuffleports      : Segir til um hvort það eigi að skanna valin port í handahófskenndri röð (1) eða hækkandi röð (0).
   -sh --shufflehosts      : Segir til um hvort það eigi að skanna uppgefna hosts í handahófskenndri röð (1).
   -hd --hostdiscovery     : Segir til um hvort það eigi að framkvæma host discovery fyrst (1) eða fara beint í skann (0).
   -cf --closedandfiltered : Segir til um hvort það eigi að sýna lokuð og blokkuð port (1)

   Here are some examples of how to run the program:
   -  Perform Connect Scan on localhost ports 1 to 1023
         python3 PointyHats.py -ho localhost
   -  Perform Connect Scan on localhost ports 20 to 45 without host discovery
         python3 PointyHats.py -ho localhost -lo 20 -hi 45 -hd 1
   -  Perform Connect Scan on scanme.nmap.org AND localhost ports 20 to 25 with host discovery
         python3 PointyHats.py -ho scanme.nmap.org localhost -lo 20 -hi 25 -hd 1
   -  Perform Syn Scan on hackthissite.org ports 20 to 800 with host discovery
         python3 PointyHats.py -ho hackthissite.org -ts 1 -lo 20 -hi 800 -hd 1
   -  Perform Syn Scan on hackthissite.org AND 127.0.0.0/24 ports 20 to 800 
      with host discovery, showing closed and filtered ports.
         python3 PointyHats.py -ho hackthissite.org 127.0.0.0/24 -ts 1 -lo 20 -hi 800 -hd 1 -cf 1
   -  Perform Syn Scan on 127.0.0.0/24 ports 20 to 800 without host discovery, 
      showing closed and filtered ports, with both port order and host order shuffled.
         python3 PointyHats.py -ho hackthissite.org 127.0.0.0/24 -ts 1 -lo 20 -hi 800 -cf 1 -sp 1 -sh 1
   -  Perform Syn Scan on all hosts listed in hostfile.txt ports 20 to 25 with host discovery, 
      showing closed and filtered ports, with both port order and host order shuffled.
         python3 PointyHats.py -ho @hostfile.txt -ts 1 -lo 20 -hi 25 -hd 1 -cf 1 -sp 1 -sh 1 


Skrár:

   -  PointyHats.py
      Skrá sem tekur við inntaki frá notanda og kallar á aðgerð til 
      að keyra viðeigandi skanner byggt á stillingum frá notanda.
   -  SynScan.py
      Skrá með klasa sem getur framkvæmt SYN Scan.
   -  ConnectionScan.py
      Skrá með klasa sem getur framkvæmt Connection (full TCP-handshake) Scan.
   -  hostfile.txt
      Skrá sem inniheldur lista yfir hosts sem má skanna.
   -  requirements.txt
      Skrá sem inniheldur lista yfir Python pakka sem þurfa að vera uppsettir til að hægt sé að keyra PointyHats.
   -  well_known_port_descriptions.csv
      Skrá sem inniheldur lista yfir vel þekkt ports og lýsingar á þeim.
   -  test.sh
      Bash scripta til að prófa Pointy Hats skannerinn.



Setting up Python Virtual Environment (virtualenv)

   virtualenv is a tool to create an isolated Python environment on your Linode. 
   This can be extremely powerful as you can create a virtual environment and 
   install all Python executables/packages to it, leaving no dependencies 
   outside of your created virtual environment.

   Navigate to your working directory that contains the file that you want to run.
   Run the following commands:
      sudo apt-get install virtualenv
      virtualenv -p python3 VENV

   Start the virtualenv, which we've named VENV
      source VENV/bin/activate
      
   Install dependencies (listed within requirements.txt)
      pip install -r requirements.txt

   Run the program.

   When you finish working, run the following command to stop VENV:
      deactivate




Allt hér fyrir neðan er fyrir höfunda.
Gagnlegir tenglar

   IP, CIDR, Network ranges
      https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing
      https://maxchadwick.xyz/blog/what-is-cidr-notation
      https://www.digitalocean.com/community/tutorials/understanding-ip-addresses-subnets-and-cidr-notation-for-networking

      https://docs.python.org/3/library/ipaddress.html
      https://docs.python.org/3/howto/ipaddress.html
      


   Host discovery
      https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol
      https://nmap.org/book/man-host-discovery.html

   Network Scanning
      https://www.geeksforgeeks.org/network-scanner-in-python/
      https://www.edureka.co/blog/nmap-tutorial/

   Argparser
      https://docs.python.org/3/library/argparse.html

   Socket
      https://docs.python.org/3/library/socket.html
